// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

// Elizabeth Grassel

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // makes instr[15]=0 mean C-instr, instr[15]=1 mean A-instr
        
        Not(in=instruction[15], out=AorALUout);
        Mux16(a=ALUout, b=in, sel=AorALUout, out=Mux1out);

    // setting A-register

        Or(a=AorALUout, b=instruction[5], out=loadAreg);
        ARegister(in=Mux1out, load=loadAreg, out=ARegOut, out[0..14]=addressM); // do we need the [0..14]? if so, why?

    // chooses between A and M

        And(a=instruction[15], b=instruction[12], out=AorM);
        Mux16(a=ARegOut, b=inM, sel=AorM, out=AM);
        
    // need to flip the bit of the instr bit (0 bit means D, 1 means no D, we want 1 to mean D)

        // original code thought
            // Not(in=instruction[11], out=isDinComp);
            // DRegister(in=ALUout, load=isDinComp, out=D);

        // new code thought
        And(a=instruction[15], b=instruction[4], out=isDinComp);
        DRegister(in=ALUout, load=isDinComp, out=D);
        
    // computes

        ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zrout, ng=ngout);

    // gives writeM output

        And(a=instruction[15],b=instruction[3],out=writeM);

    // sets ALU control bits to values that are more useful for the PC

        Not(in=ngout, out=positive);
        Not(in=zrout, out=notZero);

    // PC functions

        And(a=instruction[15], b=instruction[0], out=jgt);
        And(a=positive, b=notZero, out=posAndNotZero);
        And(a=jgt, b=posAndNotZero, out=jump1)

        And(a=instruction[15], b=instruction[1], out=jeq);
        And(a=jeq, b=zrout, out=jump2);

        And(a=instruction[15],b=instruction[2],out=jlt);
	    And(a=jlt,b=ngout,out=jump3);

        Or(a=jump1,b=jump2,out=jumpOp);
	    Or(a=jumpOp,b=jump3,out=isJump);

        PC(in=ARegOut, load=isJump, inc=true, reset=reset, out[0..14]=pc);

}       